---
test_name: GET /security/roles

marks:
  - base_tests

stages:

  # GET /security/roles
  - name: Try to show the roles of the system
    request: &all_roles_request
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/security/roles"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        limit: 1
        offset: 0
    response:
      status_code: 200
      json:
        data:
          affected_items: &roles
            - id: !anyint
              name: !anystr
              policies: !anything
              rule: !anything
              users: !anything
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

  # GET /security/roles
  - name: Try to show the roles of the system, offset = 0
    request:
      <<: *all_roles_request
      params:
        limit: 2
        offset: 0
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - <<: *roles
            - <<: *roles
          total_affected_items: !anyint
      save:
        json:
          second_role_id: data.affected_items[1].id
          second_role_name: data.affected_items[1].name

  # GET /security/roles
  - name: Try to show the roles of the system, offset = 1
    request:
      <<: *all_roles_request
      params:
        limit: 2
        offset: 1
    response:
      status_code: 200
      json:
        data:
          affected_items:
          - id: !int "{second_role_id}"
            name: "{second_role_name}"
          - <<: *roles
          total_affected_items: !anyint

  # GET /security/roles
  - name: Try to show the roles of the system, without limit
    request:
      <<: *all_roles_request
    response:
      status_code: 200
      json:
        data:
          affected_items:
          - <<: *roles

  # GET /security/roles
  - name: Try to get all roles with limit = 0
    request:
      <<: *all_roles_request
      params:
        limit: 0
    response:
      status_code: 400

  # GET /security/roles
  - name: Sort the roles
    request:
      <<: *all_roles_request
      params:
        sort: name
        limit: 2
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - <<: *roles
            - <<: *roles
          total_affected_items: !anyint
      save:
        json:
          second_role_id: data.affected_items[1].id
          second_role_name: data.affected_items[1].name

  # GET /security/roles
  - name: Sort the roles, limit=2, offset=1
    request:
      <<: *all_roles_request
      params:
        sort: name
        limit: 2
        offset: 1
    response:
      status_code: 200
      json:
        data:
          affected_items:
          - id: !int "{second_role_id}"
            name: "{second_role_name}"
          - <<: *roles
          total_affected_items: !anyint

  # GET /security/roles
  - name: Sort without limit
    request:
      <<: *all_roles_request
      params:
        sort: -name
    response:
      status_code: 200
      json:
        data:
          total_affected_items: !anyint

  # GET /security/roles
  - name: Search in roles
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/security/roles"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        search: wazuh
        limit: 1
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - <<: *roles
          total_affected_items: !anyint

  # GET /security/roles
  - name: Search without limit
    request:
      <<: *all_roles_request
      params:
        search: wazuh
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - <<: *roles
            - <<: *roles
          total_affected_items: !anyint

  # GET /security/roles
  - name: Sort without limit, non existent sort parameter
    request:
      <<: *all_roles_request
      params:
        sort: +noexist
    response:
      status_code: 400

  # GET /security/roles
  - name: Search without limit, non existent role
    request:
      <<: *all_roles_request
      params:
        search: noexist
    response:
      status_code: 200
      json:
        data:
          total_affected_items: 0

  # GET /security/roles
  - name: Invalid parameter
    request:
      <<: *all_roles_request
      params:
        noexist: nothing
    response:
      status_code: 400

  # GET /security/roles
  - name: Invalid parameters - Extra fields
    request:
      <<: *all_roles_request
      params:
        search: wazuh
        noexist: True
    response:
      status_code: 400

  # GET /security/roles
  - name: Try to show the roles of the system with a non-existent search
    request:
      <<: *all_roles_request
      params:
        search: notexist
    response:
      status_code: 200
      json:
        data:
          total_affected_items: 0
---
test_name: GET /security/policies

stages:

  # GET /security/policies
  - name: Try to show the policies of the system
    request: &all_policies_request
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/security/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        limit: 1
        offset: 0
    response:
      status_code: 200
      json:
        data:
          affected_items: &policies
            - id: !anyint
              name: !anystr
              policy: !anything
          total_affected_items: !anyint

  # GET /security/policies
  - name: Try to show the policies of the system, offset = 0
    request:
      <<: *all_policies_request
      params:
        limit: 2
        offset: 0
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - <<: *policies
            - <<: *policies
          total_affected_items: !anyint
      save:
        json:
          second_policy_id: data.affected_items[1].id
          second_policy_name: data.affected_items[1].name

  # GET /security/policies
  - name: Try to show the policies of the system, offset = 1
    request:
      <<: *all_policies_request
      params:
        limit: 2
        offset: 1
    response:
      status_code: 200
      json:
        data:
          affected_items:
          - id: !int "{second_policy_id}"
            name: "{second_policy_name}"
          - <<: *policies
          total_affected_items: !anyint

  # GET /security/policies
  - name: Try to show the policies of the system, without limit
    request:
      <<: *all_policies_request
    response:
      status_code: 200
      json:
        data:
          total_affected_items: !anyint

  # GET /security/policies
  - name: Try to get all policies with limit = 0
    request:
      <<: *all_policies_request
      params:
        limit: 0
    response:
      status_code: 400

  # GET /security/policies
  - name: Sort the policies
    request:
      <<: *all_policies_request
      params:
        sort: -name
        limit: 2
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - <<: *policies
            - <<: *policies
          total_affected_items: !anyint

  # GET /security/policies
  - name: Sort without limit
    request:
      <<: *all_policies_request
      params:
        sort: -name
    response:
      status_code: 200
      json:
        data:
          total_affected_items: !anyint

  # GET /security/policies
  - name: Search in policies
    request:
      <<: *all_policies_request
      params:
        search: wazuh
        limit: 2
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - <<: *policies
            - <<: *policies
          total_affected_items: !anyint
      save:
        json:
          policy_id: data.affected_items[0].id

  # GET /security/policies
  - name: Search without limit
    request:
      <<: *all_policies_request
      params:
        search: wazuh
    response:
      status_code: 200
      json:
        data:
          total_affected_items: 2

  # GET /security/policies
  - name: Search without limit, non existent policy
    request:
      <<: *all_policies_request
      params:
        search: noexist
    response:
      status_code: 200
      json:
        data:
          total_affected_items: 0

  # GET /security/policies
  - name: Invalid parameter
    request:
      <<: *all_policies_request
      params:
        noexist: nothing
    response:
      status_code: 400

  # GET /security/policies
  - name: Invalid parameters - Extra fields
    request:
      <<: *all_policies_request
      params:
        search: wazuh
        noexist: True
    response:
      status_code: 400

  # GET /security/policies
  - name: Try to show the policies of the system with a non-existent search
    request:
      <<: *all_policies_request
      params:
        search: notexist
    response:
      status_code: 200
      json:
        data:
          total_affected_items: 0
---
test_name: GET /security/roles

stages:

  # GET /security/roles/{role_id}
  - name: Try to show a specified role in the system
    request:
      <<: *all_roles_request
      params:
        role_ids: 2,3,4
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - <<: *roles
            - <<: *roles
            - <<: *roles

  # GET /security/roles/{non-existent role_id}
  - name: Try to show a non-existent role in the system
    request:
      <<: *all_roles_request
      params:
        role_ids: 999
    response:
      status_code: 200
      json: &response_error
        data:
          affected_items: []
          failed_items:
            - error:
                code: !anyint
              id:
                - '999'
          total_affected_items: 0
          total_failed_items: 1
---
test_name: GET /security/policies/{policy_id}

stages:

  # GET /security/policies/{policy_id}
  - name: Try to show a specified policy in the system
    request:
      <<: *all_policies_request
      params:
        policy_ids: 2,3,4
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - <<: *policies
            - <<: *policies
            - <<: *policies

  # GET /security/policies/{non-existent policy_id}
  - name: Try to show a non-existent policy in the system
    request:
      <<: *all_policies_request
      params:
        policy_ids: 999
    response:
      status_code: 200
      json:
        <<: *response_error

---
test_name: GET /security/users

stages:

  - name: Get all users in the system
    request: &all_users_request
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - id: 1
              username: wazuh
              roles: []
            - id: 2
              username: wazuh-wui
              roles: []
            - id: 99
              username: testing
              roles: []
            - id: 100
              username: administrator
              roles: []
            - id: 101
              username: normal
              roles: []
            - id: 102
              username: ossec
              roles: []
            - id: 103
              username: python
              roles: []
            - id: 104
              username: rbac
              roles: []
            - id: 105
              username: guest
              roles: []
          total_affected_items: 9
          total_failed_items: 0
          failed_items: []

---
test_name: GET /security/users/me

stages:

  - name: Get information about the current user
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/security/users/me"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - id: 99
              username: testing
              roles:
                - id: 99
                  name: "testing"
                  rule: !anything
                  policies: !anything
          total_affected_items: 1
          total_failed_items: 0
          failed_items: []

---
test_name: GET /security/users

stages:

  - name: Get a specified user by its id
    request:
      <<: *all_users_request
      params:
        user_ids: 1
    response:
      status_code: 200
      json:
        data:
          affected_items: &user
            - id: !anyint
              username: !anystr
          total_affected_items: 1

  - name: Get a specified user by its id
    request:
      <<: *all_users_request
      params:
        user_ids: 1,2
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - <<: *user
            - <<: *user
          total_affected_items: 2

  - name: Get an user by its id (invalid id)
    request:
      <<: *all_users_request
      params:
        user_ids: "!!!"
    response:
      status_code: 400

  - name: Get an user by its id (invalid id)
    request:
      <<: *all_users_request
      params:
        user_ids: "####@@@|#|"
    response:
      status_code: 400

  - name: Get an non-existent user by its id
    request:
      <<: *all_users_request
      params:
        user_ids: 10000
    response:
      status_code: 200
      json:
        data:
          affected_items: []
          failed_items:
            - error:
                code: 5001
              id:
                - '10000'
          total_affected_items: 0
          total_failed_items: 1

  - name: Get two non-existent users by their ids
    request:
      <<: *all_users_request
      params:
        user_ids: 10000,10001
    response:
      status_code: 200
      json:
        data:
          affected_items: []
          failed_items:
            - error:
                code: 5001
              id:
                - '10000'
                - '10001'
          total_affected_items: 0
          total_failed_items: 2

  - name: Get two non-existent users and an existing one by their ids
    request:
      <<: *all_users_request
      params:
        user_ids: 10000,10001,1
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - id: 1
              username: wazuh
          failed_items:
            - error:
                code: 5001
              id:
                - '10000'
                - '10001'
          total_affected_items: 1
          total_failed_items: 2

  - name: Get two non-existent users and two existent by their ids
    request:
      <<: *all_users_request
      params:
        user_ids: 10000,10001,2,1
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - id: 1
              username: wazuh
            - id: 2
              username: wazuh-wui
          failed_items:
            - error:
                code: 5001
              id:
                - '10000'
                - '10001'
          total_affected_items: 2
          total_failed_items: 2
---
test_name: GET /security/users/?search

marks:
  - parametrize:
      key: field
      vals:
        - wazuh-wui
        - normal

stages:
  - name: Testing search
    request:
      <<: *all_users_request
      params:
        search: "{field}"
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - username: "{field}"
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Testing complementary search
    request:
      <<: *all_users_request
      params:
        search: "-wazuh"
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - id: 99
              username: testing
              roles:
                - 99
            - id: 100
              username: administrator
              roles:
                - 100
                - 101
            - id: 101
              username: normal
              roles:
                - 104
                - 105
                - 103
            - id: 102
              username: ossec
              roles:
                - 101
                - 104
            - id: 103
              username: python
              roles:
                - 101
            - id: 104
              username: rbac
              roles:
                - 104
                - 102
                - 103
            - id: 105
              username: guest
              roles: []
          total_affected_items: 7
          total_failed_items: 0
          failed_items: []

---
test_name: GET /security/users/?sort

stages:
  - name: Testing inverse sort
    request:
      <<: *all_users_request
      params:
        sort: "-username"
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - id: 2
              username: wazuh-wui
              roles:
                - 2
            - id: 1
              username: wazuh
              roles:
                - 1
            - id: 99
              username: testing
              roles:
                - 99
            - id: 104
              username: rbac
              roles:
                - 104
                - 102
                - 103
            - id: 103
              username: python
              roles:
                - 101
            - id: 102
              username: ossec
              roles:
                - 101
                - 104
            - id: 101
              username: normal
              roles:
                - 104
                - 105
                - 103
            - id: 105
              username: guest
              roles: []
            - id: 100
              username: administrator
              roles:
                - 100
                - 101
          total_affected_items: 9
          total_failed_items: 0
          failed_items: []

  - name: Testing sort
    request:
      <<: *all_users_request
      params:
        sort: "username"
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - id: 100
              username: administrator
              roles:
                - 100
                - 101
            - id: 105
              username: guest
              roles: []
            - id: 101
              username: normal
              roles:
                - 104
                - 105
                - 103
            - id: 102
              username: ossec
              roles:
                - 101
                - 104
            - id: 103
              username: python
              roles:
                - 101
            - id: 104
              username: rbac
              roles:
                - 104
                - 102
                - 103
            - id: 99
              username: testing
              roles:
                - 99
            - id: 1
              username: wazuh
              roles:
                - 1
            - id: 2
              username: wazuh-wui
              roles:
                - 2
          total_affected_items: 9
          total_failed_items: 0
          failed_items: []

---
test_name: GET /security/users/?limit,offset

stages:
  - name: Testing offset
    request:
      <<: *all_users_request
      params:
        offset: 3
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - id: 100
              username: administrator
              roles:
                - 100
                - 101
            - id: 101
              username: normal
              roles:
                - 104
                - 105
                - 103
            - id: 102
              username: ossec
              roles:
                - 101
                - 104
            - id: 103
              username: python
              roles:
                - 101
            - id: 104
              username: rbac
              roles:
                - 104
                - 102
                - 103
            - id: 105
              username: guest
              roles: []
          total_affected_items: 9
          total_failed_items: 0

  - name: Testing limit
    request:
      <<: *all_users_request
      params:
        limit: 1
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - id: 1
              username: wazuh
              roles:
                - 1
          total_affected_items: 9
          total_failed_items: 0
          failed_items: []

---
test_name: GET /security/actions

stages:
  - name: Testing RBAC's actions catalog
    request: &rbac_actions_request
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/security/actions"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        endpoint: "PUT /active-response"
    response:
      status_code: 200
      json:
        active-response:command:
          description: !anystr
          resources:
            - agent:id
          example:
            actions:
              - active-response:command
            resources:
              - agent:id:001
            effect: allow
          related_endpoints:
            - PUT /active-response

  - name: Testing RBAC's actions catalog
    request:
      <<: *rbac_actions_request
      params:
        endpoint: "GET /rules/files"
    response:
      status_code: 200
      json:
        rules:read:
          description: !anystr
          resources:
            - rule:file
          example:
            actions:
              - rules:read
            resources:
              - rule:file:0610-win-ms_logs_rules.xml
            effect: allow
          related_endpoints:
            - GET /rules/files

---
test_name: GET /security/resources

stages:
  - name: Testing RBAC's actions catalog
    request: &rbac_resources_request
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/security/resources"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
    response:
      status_code: 200
      json:
        "*:*":
          description: 'Resource applied in functions which take part in the creation of a specific resource.
          We call these functions, resourceless functions. Example: agent:create'
        agent:id:
          description: Reference agents via agent ID (i.e. agent:id:001)
        group:id:
          description: Reference agent groups via group ID (i.e. group:id:default)
        node:id:
          description: Reference cluster nodes via node ID (i.e. node:id:worker1)
        file:path:
          description: Reference files via its path (i.e. file:path:etc/rules/new_rule.xml)
        decoder:file:
          description: Reference decoder files via its path (i.e. decoder:file:0005-wazuh_decoders.xml)
        list:path:
          description: Reference list files via its path (i.e. list:path:etc/lists/audit-keys)
        rule:file:
          description: Reference rule files via its path (i.e. rule:file:0610-win-ms_logs_rules.xml)
        policy:id:
          description: Reference security policies via its id (i.e. policy:id:1)
        role:id:
          description: Reference security roles via its id (i.e. role:id:1)
        user:id:
          description: Reference security users via its id (i.e. user:id:1)

  - name: Testing RBAC's actions catalog
    request:
      <<: *rbac_resources_request
      params:
        resource: "agent:id"
    response:
      status_code: 200
      json:
        agent:id:
          description: Reference agents via agent ID (i.e. agent:id:001)

---
test_name: GET /security/config

stages:

  - name: Get current security configuration
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/security/config"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
    response:
      status_code: 200
      json:
        auth_token_exp_timeout: !anyint
        rbac_mode: !anystr
