---
test_name: POST /security/roles

marks:
  - base_tests

stages:

  # POST /security/roles
  - name: Add a role to the system
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/security/roles"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      json:
        name: "test_i"
        rule:
          MATCH:
            definition: "normal_rule"
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - id: !anyint
              name: test_i
              policies: []
              rule:
                MATCH:
                  definition: normal_rule
          total_affected_items: 1

  # POST /security/roles
  - name: Add a role to the system
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/security/roles"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      json:
        name: "test_i1"
        rule:
          FIND:
            definition: "normal_rule1"
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - id: !anyint
              name: test_i1
              policies: []
              rule:
                FIND:
                  definition: normal_rule1
          total_affected_items: 1

  # POST /security/roles
  - name: Add a role to the system
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/security/roles"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      json:
        name: "test_i2"
        rule:
          FIND$:
            definition: "normal_rule2"
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - id: !anyint
              name: test_i2
              policies: []
              rule:
                FIND$:
                  definition: normal_rule2
          total_affected_items: 1

  # POST /security/roles
  - name: Add an existent role (name) to the system
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/security/roles"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      json:
        name: "test_i"
        rule:
          definition1: "normal_rule1"
    response:
      status_code: 200
      json:
        data:
          affected_items: []
          failed_items:
            - error:
                code: 4005
              id:
                - test_i
          total_affected_items: 0
          total_failed_items: 1

  # POST /security/roles
  - name: Add an existent role (rule) to the system
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/security/roles"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      json:
        name: "test_i1"
        rule:
          definition: "normal_rule"
    response:
      status_code: 200
      json:
        data:
          affected_items: []
          failed_items:
            - error:
                code: 4005
              id:
                - test_i1
          total_affected_items: 0
          total_failed_items: 1
---
test_name: POST /security/policies

stages:

  # POST /security/policies
  - name: Add a policy to the system
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/security/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      json:
        name: "test_i"
        policy:
          actions:
            - "agent:delete"
          resources:
            - "agent:id:004"
            - "agent:id:005"
            - "agent:id:006"
          effect: "allow"
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - id: !anyint
              name: test_i
              policy:
                actions:
                  - agent:delete
                effect: allow
                resources:
                  - agent:id:004
                  - agent:id:005
                  - agent:id:006
              roles: []
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  # POST /security/policies
  - name: Add a policy to the system
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/security/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      json:
        name: "test_i1"
        policy:
          actions:
            - "agent:update"
          resources:
            - "agent:id:004"
            - "agent:id:005"
            - "agent:id:006"
          effect: "allow"
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - id: !anyint
              name: test_i1
              policy:
                actions:
                  - agent:update
                effect: allow
                resources:
                  - agent:id:004
                  - agent:id:005
                  - agent:id:006
              roles: []
          total_affected_items: 1

  # POST /security/policies
  - name: Add a policy to the system
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/security/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      json:
        name: "test_i2"
        policy:
          actions:
            - "agent:upgrade"
          resources:
            - "agent:id:004"
            - "agent:id:005"
            - "agent:id:006"
          effect: "deny"
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - id: !anyint
              name: test_i2
              policy:
                actions:
                  - agent:upgrade
                effect: deny
                resources:
                  - agent:id:004
                  - agent:id:005
                  - agent:id:006
              roles: []
          total_affected_items: 1

  # POST /security/policies
  - name: Add an existent policy (name) to the system
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/security/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      json:
        name: "test_i"
        policy:
          actions:
            - "agent:delete"
          resources:
            - "agent:id:004"
            - "agent:id:005"
            - "agent:id:006"
          effect: "allow"
    response:
      status_code: 200
      json:
        data:
          affected_items: []
          failed_items:
            - error:
                code: 4009
              id:
                - test_i
          total_affected_items: 0
          total_failed_items: 1

  # POST /security/policies
  - name: Add an existent policy (policy) to the system
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/security/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      json:
        name: "test_i1"
        policy:
          actions:
            - "agent:delete"
          resources:
            - "agent:id:004"
            - "agent:id:005"
            - "agent:id:006"
          effect: "allow"
    response:
      status_code: 200
      json:
        data:
          affected_items: []
          failed_items:
            - error:
                code: 4009
              id:
                - test_i1
          total_affected_items: 0
          total_failed_items: 1

  # POST /security/policies
  - name: Add an invalid policy to the system
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/security/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      json:
        name: "test_i1"
        policy:
          actions:
            - "[agent:delete"
          resources:
            - "agent:id:004"
            - "agent:id:005"
            - "agent:id:006"
          effect: "allow"
    response:
      status_code: 200
      json:
        data:
          affected_items: []
          failed_items:
            - error:
                code: 4006
              id:
                - test_i1
          total_affected_items: 0
          total_failed_items: 1

  # POST /security/policies
  - name: Add an invalid policy to the system
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/security/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      json:
        name: "test_i1"
        policy:
          resources:
            - "agent:id:004"
            - "agent:id:005"
            - "agent:id:006"
          effect: "allow"
    response:
      status_code: 400
---
test_name: POST /security/roles/{role_id}/policies/{policy_id}

stages:

  # POST /security/roles/{role_id}/policies/{policy}
  - name: Create link role-policy
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/security/roles/103/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      params:
        policy_ids: 105
    response:
      status_code: 200
      json:
        data:
          affected_items: !anything
          total_affected_items: 1

  # POST /security/roles/{role_id}/policies/{policy}
  - name: Create link role-policy
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/security/roles/100/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      params:
        policy_ids: 105
    response:
      status_code: 200
      json:
        data:
          affected_items: !anything
          total_affected_items: 1

  # POST /security/roles/{non-existent role_id}/policies/{policy}
  - name: Create link role-policy (non-existent role)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/security/roles/999/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      params:
        policy_ids: 104,105
    response:
      status_code: 200
      json: &error
        data:
          affected_items: []
          failed_items:
            - error:
                code: !anyint
              id:
                - '999'
          total_affected_items: 0
          total_failed_items: 1

  # POST /security/roles/{role_id}/policies/{non-existent policy}
  - name: Create link role-policy (non-existent policy)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/security/roles/101/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      params:
        policy_ids: 999,10000
    response:
      status_code: 200
      json:
        data:
          affected_items: []
          failed_items:
            - error:
                code: !anyint
              id:
                - '999'
                - '10000'
          total_affected_items: 0
          total_failed_items: 2

  # POST /security/roles/{non-existent role_id}/policies/{non-existent policy}
  - name: Create link role-policy (Both non-existent)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/security/roles/999/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      params:
        policy_ids: 999,1000
    response:
      status_code: 200
      json:
        <<: *error

---
test_name: POST /security/user/{username}/roles/{role_id}

stages:
  - name: Create a new user (empty body)
    request: &post_users_request
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
    response:
      status_code: 400

  - name: Create a new user (insecure password)
    request:
      verify: False
      <<: *post_users_request
      json:
        username: "new_user"
        password: "new_user"
    response:
      status_code: 400

  - name: Create a new user (secure password)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      json:
        username: "new_user"
        password: "new_user1A!"
      method: POST
    response:
      status_code: 200

  - name: Create a new user (user already exists)
    request:
      verify: False
      <<: *post_users_request
      json:
        username: "new_user"
        password: "new_user1B!"
    response:
      status_code: 200
      json:
        data:
          affected_items: []
          failed_items:
            - error:
                code: 5000
              id:
                - new_user
          total_affected_items: 0
          total_failed_items: 1

  - name: Create a new user (invalid parameters)
    request:
      verify: False
      <<: *post_users_request
      json:
        user: "new_user1"
        pass: "new_user11A"
    response:
      status_code: 400

  - name: Create a new user (extra parameter)
    request:
      verify: False
      <<: *post_users_request
      json:
        username: "new_user1"
        password: "new_user11A"
        pass: "extra"
    response:
      status_code: 400

  - name: Create a new user (extra parameters)
    request:
      verify: False
      <<: *post_users_request
      json:
        pass: "extra"
        username: "new_user1"
        pass1: "extra"
        pass2: "extra"
        pass3: "extra"
        pass4: "extra"
        pass5: "extra"
        pass6: "extra"
        password: "new_user11A"
        pass7: "extra"
    response:
      status_code: 400

  - name: Create a new user (missing password parameter)
    request:
      verify: False
      <<: *post_users_request
      json:
        username: "new_user1"
    response:
      status_code: 400

  - name: Create a new user (missing username parameter)
    request:
      verify: False
      <<: *post_users_request
      json:
        password: "new_user11A"
    response:
      status_code: 400

  - name: Create a new user (invalid username parameter)
    request:
      verify: False
      <<: *post_users_request
      json:
        password: "new_user11A"
        username: 1
    response:
      status_code: 400

  - name: Create a new user (invalid password parameter)
    request:
      verify: False
      <<: *post_users_request
      json:
        password: 1
        username: "new_user1"
    response:
      status_code: 400

  - name: Create a new user (secure password)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      json:
        username: "new_user1"
        password: "new_user1A!"
      method: POST
    response:
      status_code: 200

  # POST /security/user/{username}/roles/{role_id}
  - name: Create link user-role
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/security/users/106/roles"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      params:
        role_ids: 3
    response:
      status_code: 200
      json:
        data:
          affected_items: !anything
          total_affected_items: 1

  # POST /security/user/{username}/roles/{role_id}
  - name: Create link user-role
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/security/users/107/roles"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      params:
        role_ids: 3,4,5
    response:
      status_code: 200
      json:
        data:
          affected_items: !anything
          total_affected_items: 3

  # POST /security/user/{username}/roles/{role_id}
  - name: Create link user-role (non-existent roles)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/security/users/107/roles"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      params:
        role_ids: 500,498
    response:
      status_code: 200
      json:
        data:
          affected_items: []
          failed_items:
            - error:
                code: 4002
              id:
                - '498'
                - '500'
          total_affected_items: 0
          total_failed_items: 2

  # POST /security/user/{username}/roles/{role_id}
  - name: Create link user-role (valid roles, already linked roles, non-existent roles)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/security/users/106/roles"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      params:
        role_ids: 4,5,3,500,498
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - roles:
                - 3
                - 4
                - 5
              username: new_user
          failed_items:
            - error:
                code: 4002
              id:
                - '498'
                - '500'
            - error:
                code: 4017
              id:
                - '3'
          total_affected_items: 2
          total_failed_items: 3
